{
  "id": "mvvm",
  "title": "MVVM 패턴",
  "meta": {
    "category": "아키텍처 패턴",
    "difficulty": "난이도: ★★★★☆"
  },
  "sections": [
    {
      "id": "overview",
      "title": "패턴 개요",
      "content": "MVVM(Model-View-ViewModel) 패턴은 GUI 애플리케이션을 위한 아키텍처 패턴으로, 프레젠테이션 로직과 비즈니스 로직을 분리하여 유지보수성과 테스트 용이성을 향상시킵니다. 이 패턴은 Microsoft의 WPF와 Silverlight를 위해 개발되었으며, 현재는 다양한 플랫폼에서 UI 개발의 중요한 패턴으로 사용되고 있습니다.",
      "benefits": [
        "관심사 분리(Separation of Concerns)를 통한 코드 관리 용이성",
        "데이터 바인딩을 통한 UI와 로직의 자동 동기화",
        "ViewModel의 테스트 용이성",
        "UI 디자이너와 개발자의 협업 효율성 증가",
        "코드 재사용성 향상"
      ],
      "useCases": [
        "게임 UI 시스템 (인벤토리, 스탯 화면, 퀘스트 창 등)",
        "데이터 시각화가 필요한 복잡한 게임 화면",
        "반응형 UI가 필요한 시스템",
        "실시간으로 업데이트되는 게임 내 정보 표시",
        "에디터 확장 기능 및 도구 개발"
      ]
    },
    {
      "id": "components",
      "title": "1. MVVM 패턴의 구성 요소",
      "subtypes": [
        {
          "title": "1.1 Model (모델)",
          "description": "애플리케이션의 데이터와 비즈니스 로직을 담당합니다. 데이터의 저장, 처리, 갱신을 수행하며 ViewModel에 의존하지 않습니다. 모델은 데이터 소스(데이터베이스, 서버, 파일 등)와 상호작용하여 필요한 데이터를 제공합니다."
        },
        {
          "title": "1.2 View (뷰)",
          "description": "사용자에게 정보를 표시하고 입력을 ViewModel에 전달합니다. UI 요소(버튼, 슬라이더 등)를 포함하며 ViewModel과 데이터 바인딩됩니다. 뷰는 가능한 한 코드 비하인드(코드의 로직)를 최소화하고 주로 선언적인 방식으로 UI를 정의합니다."
        },
        {
          "title": "1.3 ViewModel (뷰모델)",
          "description": "View와 Model 사이의 중재자 역할을 합니다. Model의 데이터를 View에 표시하기 적합하게 가공하고, View의 입력을 받아 Model을 업데이트합니다. ViewModel은 View에 독립적이며, Model의 데이터를 View에 적합한 형태로 변환하는 책임을 갖습니다."
        }
      ]
    },
    {
      "id": "why",
      "title": "2. 왜 MVVM 패턴을 사용해야 하는가?",
      "benefits": [
        {
          "title": "2.1 관심사 분리",
          "description": "UI, 비즈니스 로직, 데이터 처리를 분리하여 코드의 모듈성을 높이고 유지보수를 용이하게 합니다. 각 구성 요소가 담당하는 역할이 명확하게 구분됩니다."
        },
        {
          "title": "2.2 데이터 바인딩",
          "description": "View와 ViewModel 사이의 데이터 바인딩을 통해 자동으로 UI가 업데이트되므로, 수동으로 UI를 업데이트하는 코드를 줄일 수 있습니다."
        },
        {
          "title": "2.3 테스트 용이성",
          "description": "ViewModel은 View에 독립적이므로 단위 테스트가 용이합니다. UI 없이도 ViewModel의 로직을 검증할 수 있습니다."
        },
        {
          "title": "2.4 코드 재사용성",
          "description": "다양한 View가 동일한 ViewModel을 사용할 수 있어 코드 재사용성이 향상됩니다."
        },
        {
          "title": "2.5 디자이너-개발자 협업",
          "description": "디자이너는 View에, 개발자는 ViewModel과 Model에 집중할 수 있어 협업 효율성이 증가합니다."
        }
      ]
    },
    {
      "id": "when",
      "title": "3. 어떤 상황에서 사용해야 하는가?",
      "useCases": [
        {
          "title": "3.1 복잡한 UI 시스템",
          "description": "게임 내 인벤토리, 캐릭터 스탯 화면, 상점 시스템과 같이 복잡한 UI가 필요하고 데이터 표시와 사용자 입력 처리가 많은 경우에 적합합니다."
        },
        {
          "title": "3.2 실시간 데이터 업데이트",
          "description": "플레이어 체력, 경험치, 점수 등 게임 중 자주 변경되는 데이터를 UI에 실시간으로 반영해야 하는 경우에 유용합니다."
        },
        {
          "title": "3.3 다양한 플랫폼 지원",
          "description": "동일한 데이터를 다양한 형태의 UI로 표시해야 하는 경우, ViewModel을 재사용하여 여러 View를 지원할 수 있습니다."
        },
        {
          "title": "3.4 테스트 중심 개발",
          "description": "자동화된 테스트가 중요한 프로젝트에서 UI 로직을 테스트하기 쉽게 만들고자 할 때 유용합니다."
        }
      ]
    },
    {
      "id": "implementation",
      "title": "4. 어떻게 구현하는가?",
      "content": "MVVM 패턴의 구현은 다양한 언어로 가능합니다. 아래 링크를 통해 각 언어별 구현 코드를 확인할 수 있습니다.",
      "codeLinks": [
        {
          "language": "C#",
          "url": "codes/mvvm_csharp.html"
        },
        {
          "language": "C++",
          "url": "codes/mvvm_cpp.html"
        }
      ]
    },
    {
      "id": "pros-cons",
      "title": "5. MVVM 패턴의 장단점",
      "pros": [
        {
          "title": "관심사 분리",
          "description": "UI, 비즈니스 로직, 데이터 처리가 분리되어 코드의 모듈성과 유지보수성이 향상됩니다."
        },
        {
          "title": "데이터 바인딩을 통한 자동 UI 업데이트",
          "description": "데이터가 변경되면 자동으로 UI가 업데이트되어 코드량이 줄고 UI 업데이트 관련 버그가 감소합니다."
        },
        {
          "title": "테스트 용이성",
          "description": "ViewModel이 View에 독립적이므로 단위 테스트가 쉬워집니다."
        },
        {
          "title": "코드 재사용성",
          "description": "ViewModel은 여러 View에서 재사용할 수 있어 코드 중복이 줄어듭니다."
        }
      ],
      "cons": [
        {
          "title": "학습 곡선",
          "description": "데이터 바인딩과 MVVM 개념을 이해하는 데 시간이 필요할 수 있습니다."
        },
        {
          "title": "단순한 UI에는 과도할 수 있음",
          "description": "간단한 UI에 MVVM을 적용하면 불필요한 복잡성이 증가할 수 있습니다."
        },
        {
          "title": "메모리 사용량 증가",
          "description": "데이터 바인딩과 추가 레이어로 인해 메모리 사용량이 증가할 수 있습니다."
        },
        {
          "title": "디버깅 복잡성",
          "description": "데이터 바인딩으로 인해 데이터 흐름을 추적하기 어려울 수 있습니다."
        }
      ]
    },
    {
      "id": "best-practices",
      "title": "6. 주의사항 및 모범 사례",
      "practices": [
        {
          "title": "ViewModel은 View에 대해 알지 말아야 함",
          "description": "ViewModel은 특정 View에 의존하지 않도록 설계하여 재사용성을 높이고 테스트를 용이하게 해야 합니다."
        },
        {
          "title": "Command 패턴 활용",
          "description": "사용자 입력 처리를 위해 Command 패턴을 활용하여 View와 ViewModel 간의 상호작용을 체계화할 수 있습니다."
        },
        {
          "title": "필요한 경우에만 적용",
          "description": "단순한 UI에는 MVVM이 과도할 수 있으므로, UI의 복잡성에 따라 적절한 패턴을 선택해야 합니다."
        },
        {
          "title": "메모리 누수 주의",
          "description": "데이터 바인딩으로 인한 순환 참조가 발생하지 않도록 약한 참조(Weak Reference)를 활용하세요."
        }
      ]
    }
  ],
  "navigation": {
    "back": {
      "url": "patterns.html",
      "text": "패턴 목록으로 돌아가기"
    },
    "next": {
      "url": "codes/mvvm_csharp.html",
      "text": "C# 코드 예제 보기"
    }
  }
}