{
  "id": "mvp",
  "title": "MVP 패턴",
  "meta": {
    "category": "구조 패턴",
    "difficulty": "난이도: ★★★☆☆"
  },
  "sections": [
    {
      "id": "overview",
      "title": "패턴 개요",
      "content": "MVP(Model-View-Presenter) 패턴은 사용자 인터페이스와 비즈니스 로직을 분리하는 아키텍처 패턴입니다. 이 패턴은 코드의 모듈성을 향상시키고, 테스트 용이성을 높이며, 관심사의 분리(Separation of Concerns)를 촉진합니다. 게임 개발에서는 UI 관리, 데이터 표시, 사용자 입력 처리 등에 널리 사용됩니다.",
      "benefits": [
        "UI 로직과 비즈니스 로직의 명확한 분리",
        "코드의 모듈성 및 재사용성 향상",
        "단위 테스트 용이성 증가",
        "UI 변경 시 비즈니스 로직 영향 최소화",
        "다양한 플랫폼 및 화면에 대한 적응성 향상"
      ],
      "useCases": [
        "게임 UI 시스템 (체력바, 스코어 보드, 인벤토리 등)",
        "캐릭터 상태 표시 (체력, 마나, 경험치 등)",
        "설정 화면 및 메뉴 시스템",
        "게임 데이터 에디터 및 도구",
        "복잡한 폼 및 입력 처리",
        "멀티플랫폼 게임의 UI 일관성 유지"
      ]
    },
    {
      "id": "basic-components",
      "title": "1. MVP 패턴의 기본 구성 요소",
      "subtypes": [
        {
          "title": "1.1 Model(모델)",
          "description": "애플리케이션의 데이터와 비즈니스 로직을 담당합니다. 데이터의 저장, 검색, 변환 등의 작업을 수행하며, View나 Presenter에 대한 정보를 가지지 않습니다. 모델은 데이터의 관리 및 조작에 관한 비즈니스 규칙을 포함합니다."
        },
        {
          "title": "1.2 View(뷰)",
          "description": "사용자에게 정보를 표시하고 사용자의 입력을 받는 역할을 합니다. 게임에서는 UI 요소(버튼, 슬라이더, 텍스트 등)가 View에 해당합니다. 뷰는 사용자 인터페이스를 담당하며, 비즈니스 로직을 포함하지 않습니다."
        },
        {
          "title": "1.3 Presenter(프리젠터)",
          "description": "View와 Model 사이의 중재자 역할을 합니다. View의 입력을 받아 Model을 조작하고, Model의 변경 사항을 View에 반영합니다. 프리젠터는 뷰와 모델 간의 상호작용을 조정하고, 뷰에 표시될 데이터를 가공합니다."
        }
      ]
    },
    {
      "id": "why",
      "title": "2. 왜 MVP 패턴을 사용해야 하는가?",
      "benefits": [
        {
          "title": "2.1 관심사의 분리",
          "description": "MVP 패턴은 데이터(Model), 표현(View), 논리(Presenter)를 명확히 분리하여 각 구성 요소가 자신의 책임에만 집중할 수 있게 합니다. 이는 코드의 가독성과 유지보수성을 크게 향상시킵니다."
        },
        {
          "title": "2.2 테스트 용이성",
          "description": "UI와 비즈니스 로직이 분리되어 있어 Presenter와 Model은 View 없이도 독립적으로 테스트할 수 있습니다. 이는, 특히 Unity와 같은 게임 엔진 환경에서 단위 테스트를 더 쉽게 만듭니다."
        },
        {
          "title": "2.3 코드 재사용성",
          "description": "동일한 Model을 다양한 View와 함께 사용할 수 있으며, 다양한 플랫폼에서 UI만 변경하면서 동일한 비즈니스 로직을 유지할 수 있습니다."
        },
        {
          "title": "2.4 변경 관리 용이성",
          "description": "UI 디자인이 변경되어도 비즈니스 로직에는 영향을 주지 않으며, 비즈니스 로직이 변경되어도 UI 코드를 수정할 필요가 없습니다."
        }
      ]
    },
    {
      "id": "when",
      "title": "3. 어떤 상황에서 사용해야 하는가?",
      "useCases": [
        {
          "title": "3.1 복잡한 UI가 있는 게임",
          "description": "인벤토리 시스템, 캐릭터 상태 창, 퀘스트 로그 등 복잡한 UI 요소가 많은 게임에서 MVP 패턴은 코드를 체계적으로 관리하는 데 도움이 됩니다."
        },
        {
          "title": "3.2 다양한 플랫폼 지원이 필요한 경우",
          "description": "PC, 모바일, 콘솔 등 다양한 플랫폼에서 실행되는 게임의 경우, MVP 패턴을 사용하면 플랫폼별로 View만 변경하면서 동일한 비즈니스 로직을 유지할 수 있습니다."
        },
        {
          "title": "3.3 팀 협업이 필요한 큰 프로젝트",
          "description": "UI 디자이너, 프로그래머, 게임 디자이너 등이 함께 작업하는 프로젝트에서 MVP 패턴은 역할과 책임을 명확히 분리하여 협업을 용이하게 합니다."
        },
        {
          "title": "3.4 테스트 주도 개발(TDD)을 적용하는 경우",
          "description": "테스트 주도 개발 방법론을 사용하는 프로젝트에서 MVP 패턴은 UI와 분리된 비즈니스 로직에 대한 단위 테스트를 쉽게 작성할 수 있게 합니다."
        }
      ]
    },
    {
      "id": "implementation",
      "title": "4. 어떻게 구현하는가?",
      "content": "MVP 패턴의 구현은 다양한 언어로 가능합니다. 아래 링크를 통해 각 언어별 구현 코드를 확인할 수 있습니다.",
      "codeLinks": [
        {
          "language": "C#",
          "url": "codes/mvp_csharp.html"
        },
        {
          "language": "C++",
          "url": "codes/mvp_cpp.html"
        }
      ]
    },
    {
      "id": "pros-cons",
      "title": "5. MVP 패턴의 장단점",
      "pros": [
        {
          "title": "관심사의 분리",
          "description": "UI, 데이터, 로직이 명확히 분리되어 코드의 가독성과 유지보수성이 향상됩니다."
        },
        {
          "title": "테스트 용이성",
          "description": "Presenter와 Model은 View 없이도 독립적으로 테스트할 수 있어 단위 테스트 작성이 쉬워집니다."
        },
        {
          "title": "코드 재사용성",
          "description": "동일한 Model과 Presenter를 다양한 View와 함께 사용할 수 있습니다."
        },
        {
          "title": "유연성",
          "description": "각 구성 요소를 독립적으로 수정하고 확장할 수 있어 요구사항 변경에 유연하게 대응할 수 있습니다."
        }
      ],
      "cons": [
        {
          "title": "코드량 증가",
          "description": "단순한 기능에도 세 가지 구성 요소를 모두 구현해야 하므로 코드량이 늘어날 수 있습니다."
        },
        {
          "title": "러닝 커브",
          "description": "패턴을 처음 접하는 개발자에게는 이해하고 구현하기 어려울 수 있습니다."
        },
        {
          "title": "Presenter의 복잡성",
          "description": "복잡한 UI 로직은 Presenter에 많은 코드가 집중되어 'Massive Presenter' 문제가 발생할 수 있습니다."
        },
        {
          "title": "오버엔지니어링 가능성",
          "description": "간단한 UI나 작은 프로젝트에서는 MVP 패턴이 불필요한 복잡성을 추가할 수 있습니다."
        }
      ]
    },
    {
      "id": "best-practices",
      "title": "6. 주의사항 및 모범 사례",
      "practices": [
        {
          "title": "Presenter 책임 명확화",
          "description": "Presenter가 너무 많은 책임을 갖지 않도록 주의하세요. 필요한 경우 여러 작은 Presenter로 분리하거나 Helper 클래스를 사용하여 로직을 분산시킵니다."
        },
        {
          "title": "인터페이스 활용",
          "description": "View와 Presenter 간의 통신을 위해 인터페이스를 정의하세요. 이를 통해 코드 결합도를 낮추고 모의 객체(Mock)를 사용한 테스트가 용이해집니다."
        },
        {
          "title": "View의 수동성 유지",
          "description": "View는 가능한 한 수동적으로 유지하고, 복잡한 로직은 Presenter에서 처리하세요. View는 UI 표시와 사용자 입력 전달에만 집중해야 합니다."
        },
        {
          "title": "Model 독립성 보장",
          "description": "Model은 View나 Presenter에 대한 참조를 가지지 않아야 합니다. Model은 독립적으로 동작하여 재사용성과 테스트 용이성을 극대화해야 합니다."
        },
        {
          "title": "싱글톤 남용 주의",
          "description": "Presenter나 Model에서 싱글톤 패턴을 과도하게 사용하면 테스트 용이성이 저하되므로 의존성 주입 방식을 고려하세요."
        },
        {
          "title": "단방향 데이터 흐름 설계",
          "description": "복잡한 MVP 구조에서는 데이터 흐름을 단방향으로 설계하여 예측 가능성을 높이고 디버깅을 용이하게 만드세요."
        },
        {
          "title": "이벤트 기반 통신 활용",
          "description": "Model과 Presenter 간의 통신에 이벤트 시스템을 활용하면 결합도를 낮추고 비동기 작업 처리가 용이해집니다."
        },
        {
          "title": "Unity의 MonoBehaviour 분리",
          "description": "Unity에서 MVP 패턴을 적용할 때, View는 MonoBehaviour를 상속받지만 Presenter와 Model은 일반 C# 클래스로 구현하여 Unity 엔진 의존성을 최소화하는 것이 좋습니다."
        }
      ]
    }
  ],
  "navigation": {
    "back": {
      "url": "patterns.html",
      "text": "패턴 목록으로 돌아가기"
    },
    "next": {
      "url": "codes/mvp_csharp.html",
      "text": "C# 코드 예제 보기"
    }
  }
}